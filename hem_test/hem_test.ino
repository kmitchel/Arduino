
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>

#include <PubSubClient.h>

WiFiClient espClient;

PubSubClient mqtt(espClient);

#include <TimeLib.h>

WiFiUDP Udp;

#include <Wire.h>

#include "SSD1306.h"

#define OLED_SDA    4  // pin 14
#define OLED_SDC    5  // pin 12
#define OLED_ADDR   0x3C

SSD1306   display(OLED_ADDR, OLED_SDA, OLED_SDC);    // For I2C

unsigned int localPort = 8888;  // local port to listen for UDP packets
const int timeZone = 0;

const char* server = "raspberrypi";
const char* ssid     = "Mitchell";
const char* password = "easypassword";

int power, temp, icon;


const uint8_t READY = 1, NEXTBTN=2;
uint8_t state = READY;

void callback(char* topic, byte* payload, unsigned int length) {
  String payloads;
  for (int i = 0; i < length; i++) {
    payloads += (char)payload[i];
  }
  if (strcmp(topic, "power/W") == 0) {
    int thisNumber = payloads.toInt();
    if (thisNumber > 0) {
      power = thisNumber;
      draw();
    }
  }
  if (strcmp(topic, "temp/tempF") == 0) {
    int thisNumber = payloads.toInt();
    if (thisNumber > 0) {
      temp = thisNumber;
      draw();
    }
  }
  if (strcmp(topic, "hvac/state") == 0) {
    if (strcmp(payloads.c_str(), "CoolReady") == 0 || strcmp(payloads.c_str(), "HeatReady") == 0) {
      icon = 0;   
    }
    if (strcmp(payloads.c_str(), "CoolOn") == 0 || strcmp(payloads.c_str(), "Cooling") == 0) {
      icon = 1;   
    }
    if (strcmp(payloads.c_str(), "HeatOn") == 0 || strcmp(payloads.c_str(), "Heating") == 0) {
      icon = 2;   
    }
    if (strcmp(payloads.c_str(), "FanWait") == 0 || strcmp(payloads.c_str(), "Wait") == 0) {
      icon = 3;   
    }
    draw();
  }
}

static char cool[] = {
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC3,
  0xC7, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE7, 0xE3, 0x03, 0x00, 0x00,
  0x00, 0x00, 0xC0, 0xEF, 0xF3, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xDF,
  0xF7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xFE,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0xFE, 0x3F, 0x00, 0x1E, 0x00,
  0x00, 0xF0, 0x01, 0xF8, 0x1F, 0x00, 0x1F, 0x00, 0x00, 0xF0, 0x01, 0xF0,
  0x1F, 0x00, 0x1F, 0x00, 0x00, 0xF0, 0x01, 0xE0, 0x07, 0x00, 0x1F, 0x00,
  0xE0, 0xE3, 0x03, 0xE0, 0x07, 0x80, 0x1F, 0x00, 0xE0, 0xE7, 0x03, 0xC0,
  0x03, 0x80, 0x8F, 0x07, 0xE0, 0xFF, 0x03, 0xE0, 0x07, 0x80, 0xEF, 0x0F,
  0xE0, 0xFF, 0x03, 0xE0, 0x07, 0xC0, 0xFF, 0x0F, 0xC0, 0xFF, 0x07, 0xC0,
  0x03, 0xC0, 0xFF, 0x07, 0x00, 0xFF, 0x07, 0xC0, 0x07, 0xC0, 0xFF, 0x03,
  0x00, 0xFC, 0x0F, 0xE0, 0x03, 0xC0, 0xFF, 0x01, 0x80, 0xFF, 0x1F, 0xE0,
  0x07, 0xF0, 0x7F, 0x00, 0xE0, 0xFF, 0x7F, 0xE0, 0x07, 0xFC, 0xFF, 0x01,
  0xF0, 0xFF, 0xFF, 0xF8, 0x1F, 0xFF, 0xFF, 0x07, 0xF0, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x1F, 0xF0, 0x0F, 0xFC, 0xFF, 0xFF, 0x7F, 0xFE, 0x0F,
  0xC0, 0x00, 0xF0, 0xFF, 0xFF, 0x1F, 0xF0, 0x1F, 0x00, 0x00, 0xE0, 0xFF,
  0xFF, 0x0F, 0x00, 0x07, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF,
  0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xFF,
  0xFF, 0x01, 0x00, 0x00, 0xE0, 0x00, 0xF0, 0xFF, 0xFF, 0x07, 0x00, 0x00,
  0xF0, 0x0F, 0xFC, 0xFF, 0xFF, 0x0F, 0x80, 0x06, 0xF8, 0x7F, 0xFE, 0xFF,
  0xFF, 0x3F, 0xF0, 0x0F, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F,
  0xE0, 0xFF, 0xFF, 0xF8, 0x3F, 0xFF, 0xFF, 0x0F, 0x80, 0xFF, 0x3F, 0xF0,
  0x07, 0xFE, 0xFF, 0x07, 0x00, 0xFE, 0x0F, 0xC0, 0x07, 0xF8, 0xFF, 0x01,
  0x00, 0xFF, 0x07, 0xE0, 0x07, 0xF0, 0x7F, 0x00, 0xC0, 0xFF, 0x03, 0xC0,
  0x03, 0xE0, 0xFF, 0x00, 0xF0, 0xFF, 0x03, 0xC0, 0x03, 0xE0, 0xFF, 0x03,
  0xF0, 0xFF, 0x03, 0xE0, 0x07, 0xC0, 0xFF, 0x07, 0xF0, 0xF7, 0x01, 0xE0,
  0x07, 0xC0, 0xFF, 0x07, 0xE0, 0xF1, 0x01, 0xC0, 0x03, 0xC0, 0xE7, 0x07,
  0x00, 0xF8, 0x01, 0xE0, 0x07, 0xC0, 0xCF, 0x07, 0x00, 0xF8, 0x00, 0xE0,
  0x07, 0x80, 0x0F, 0x00, 0x00, 0xF8, 0x00, 0xF0, 0x0F, 0x80, 0x0F, 0x00,
  0x00, 0xF8, 0x00, 0xF8, 0x3F, 0x80, 0x0F, 0x00, 0x00, 0x78, 0x00, 0xFE,
  0x3F, 0x80, 0x0F, 0x00, 0x00, 0x20, 0x00, 0xFE, 0xFF, 0x00, 0x0F, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF,
  0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xDF, 0xFB, 0x03, 0x00, 0x00,
  0x00, 0x00, 0xC0, 0xEF, 0xF7, 0x03, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xE7,
  0xE7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC3, 0xC3, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static char heat[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF8, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
  0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x1F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xF8, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x7F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFC, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE,
  0xFF, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC1, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF, 0x81, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF,
  0xFF, 0x83, 0x03, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x87, 0x07, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0x87, 0x07, 0x00, 0x00, 0x00, 0xC0, 0xFF,
  0xFF, 0x8F, 0x0F, 0x00, 0x00, 0x20, 0xC0, 0xFF, 0xFF, 0xC7, 0x1F, 0x00,
  0x00, 0x30, 0xE0, 0xFF, 0xFF, 0xCF, 0x1F, 0x00, 0x00, 0x30, 0xF0, 0xFF,
  0xFF, 0xEF, 0x3F, 0x00, 0x00, 0x70, 0xF0, 0xFF, 0xFF, 0xFF, 0x3F, 0x00,
  0x00, 0x70, 0xF8, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x78, 0xFC, 0xFF,
  0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x78, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
  0x00, 0x7C, 0xFE, 0xFF, 0xFD, 0xFF, 0xFF, 0x00, 0x00, 0xFC, 0xFF, 0xFF,
  0xF9, 0xFF, 0xFF, 0x01, 0x00, 0xFE, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0x01,
  0x00, 0xFE, 0xFF, 0xFF, 0xE1, 0xFF, 0xFF, 0x03, 0x00, 0xFF, 0xFF, 0xFF,
  0xC1, 0xFF, 0xFF, 0x03, 0x00, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0x03,
  0x00, 0xFF, 0xFF, 0xFF, 0x80, 0xFF, 0xFF, 0x03, 0x80, 0xFF, 0xFF, 0xFF,
  0x00, 0xFF, 0xFF, 0x07, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF, 0x03,
  0xC0, 0xFF, 0xFF, 0xF9, 0x00, 0xFE, 0xFF, 0x07, 0xC0, 0xFF, 0xFF, 0x79,
  0x00, 0xFE, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0x79, 0x00, 0xFC, 0xFF, 0x07,
  0xC0, 0xFF, 0xFF, 0x30, 0x00, 0xFC, 0xFF, 0x07, 0xC0, 0xFF, 0xFF, 0x38,
  0x00, 0xF8, 0xFF, 0x07, 0xE0, 0xFF, 0x7F, 0x10, 0x00, 0xF8, 0xFF, 0x07,
  0xE0, 0xFF, 0x7F, 0x10, 0x00, 0xF8, 0xFF, 0x07, 0xE0, 0xFF, 0x7F, 0x00,
  0x00, 0xF0, 0xFF, 0x03, 0xE0, 0xFF, 0x3F, 0x00, 0x00, 0xF0, 0xFF, 0x03,
  0xE0, 0xFF, 0x1F, 0x00, 0x00, 0xF0, 0xFF, 0x03, 0xE0, 0xFF, 0x1F, 0x00,
  0x00, 0xF0, 0xFF, 0x03, 0xC0, 0xFF, 0x0F, 0x00, 0x00, 0xE0, 0xFF, 0x01,
  0xC0, 0xFF, 0x0F, 0x00, 0x00, 0xF0, 0xFF, 0x01, 0xC0, 0xFF, 0x07, 0x00,
  0x00, 0xE0, 0xFF, 0x00, 0xC0, 0xFF, 0x07, 0x00, 0x00, 0xE0, 0xFF, 0x00,
  0x80, 0xFF, 0x03, 0x00, 0x00, 0xE0, 0x7F, 0x00, 0x00, 0xFF, 0x03, 0x00,
  0x00, 0xE0, 0x3F, 0x00, 0x00, 0xFF, 0x03, 0x00, 0x00, 0xF0, 0x3F, 0x00,
  0x00, 0xFE, 0x03, 0x00, 0x00, 0xE0, 0x1F, 0x00, 0x00, 0xFC, 0x03, 0x00,
  0x00, 0xF0, 0x0F, 0x00, 0x00, 0xF8, 0x03, 0x00, 0x00, 0xF0, 0x07, 0x00,
  0x00, 0xF0, 0x03, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x00, 0xE0, 0x07, 0x00,
  0x00, 0xF0, 0x01, 0x00, 0x00, 0xC0, 0x07, 0x00, 0x00, 0xF8, 0x00, 0x00,
  0x00, 0x00, 0x07, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static char waiting[] = {
  0x80, 0x26, 0x49, 0x92, 0x24, 0x49, 0x92, 0x00, 0xC0, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x03, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
  0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xE0, 0xBF, 0xA5, 0x55,
  0xBA, 0xA5, 0xF5, 0x07, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03,
  0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 0xE0, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0x03, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07,
  0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xC0, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0x03, 0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03,
  0xC0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01, 0xC0, 0x0F, 0x00, 0x00,
  0x00, 0x00, 0xF0, 0x03, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x01,
  0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x01, 0x80, 0x1F, 0x70, 0xDB,
  0xEE, 0x0E, 0xF8, 0x01, 0x00, 0x3F, 0xE0, 0xFF, 0xFF, 0x07, 0xF8, 0x00,
  0x00, 0x3F, 0xE0, 0xFF, 0xFF, 0x07, 0xFC, 0x00, 0x00, 0x3F, 0xC0, 0xFF,
  0xFF, 0x03, 0xFC, 0x00, 0x00, 0x7E, 0x80, 0xFF, 0xFF, 0x01, 0x7E, 0x00,
  0x00, 0xFE, 0x00, 0xFF, 0xFF, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0xFC,
  0x3F, 0x00, 0x3F, 0x00, 0x00, 0xF8, 0x01, 0xF8, 0x1F, 0x80, 0x1F, 0x00,
  0x00, 0xF8, 0x03, 0xF0, 0x0F, 0xC0, 0x1F, 0x00, 0x00, 0xF0, 0x07, 0xE0,
  0x07, 0xE0, 0x0F, 0x00, 0x00, 0xE0, 0x0F, 0xE0, 0x07, 0xF0, 0x07, 0x00,
  0x00, 0xC0, 0x3F, 0xC0, 0x03, 0xFC, 0x03, 0x00, 0x00, 0x80, 0x7F, 0xC0,
  0x03, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xFF, 0xC0, 0x03, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0xC1, 0x83, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xC0,
  0x03, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xC0, 0x03, 0x3F, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0xC1, 0x83, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xC0,
  0x03, 0xFF, 0x00, 0x00, 0x00, 0x80, 0x7F, 0xC0, 0x03, 0xFE, 0x01, 0x00,
  0x00, 0xC0, 0x3F, 0xC0, 0x03, 0xFC, 0x03, 0x00, 0x00, 0xE0, 0x0F, 0xE0,
  0x07, 0xF0, 0x07, 0x00, 0x00, 0xF0, 0x07, 0xE0, 0x07, 0xE0, 0x0F, 0x00,
  0x00, 0xF8, 0x03, 0xF0, 0x0F, 0xC0, 0x1F, 0x00, 0x00, 0xF8, 0x01, 0xF8,
  0x1F, 0x80, 0x1F, 0x00, 0x00, 0xFC, 0x00, 0xFC, 0x3F, 0x00, 0x3F, 0x00,
  0x00, 0xFC, 0x00, 0xFF, 0xFF, 0x00, 0x7F, 0x00, 0x00, 0x7E, 0x80, 0xFF,
  0xFF, 0x01, 0x7E, 0x00, 0x00, 0x3E, 0xC0, 0xFF, 0xFF, 0x03, 0x7C, 0x00,
  0x00, 0x3F, 0xE0, 0xFF, 0xFF, 0x07, 0xFC, 0x00, 0x00, 0x3F, 0xF0, 0xFF,
  0xFF, 0x0F, 0xF8, 0x00, 0x80, 0x1F, 0xF0, 0xFF, 0xFF, 0x0F, 0xF8, 0x01,
  0x80, 0x1F, 0xF8, 0xFF, 0xFF, 0x1F, 0xF8, 0x01, 0x80, 0x0F, 0xF8, 0xFF,
  0xFF, 0x1F, 0xF0, 0x01, 0xC0, 0x0F, 0xFC, 0xFF, 0xFF, 0x1F, 0xF0, 0x03,
  0xC0, 0x0F, 0xFC, 0xFF, 0xFF, 0x3F, 0xF0, 0x03, 0xC0, 0x0F, 0xFC, 0xFF,
  0xFF, 0x3F, 0xF0, 0x03, 0xC0, 0x0F, 0xFC, 0xFF, 0xFF, 0x7F, 0xE0, 0x03,
  0xE0, 0x07, 0xFE, 0xFF, 0xFF, 0x7F, 0xF0, 0x07, 0xC0, 0x07, 0x6C, 0x55,
  0xDA, 0x2A, 0xE0, 0x03, 0xC0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03,
  0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 0xE0, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0x07, 0xE0, 0xAF, 0x5D, 0xAA, 0xA5, 0x5D, 0xFA, 0x07,
  0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xE0, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0x03, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07,
  0x40, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x02
};

void draw() {
if (state == READY)
{  
  display.clear();

  char buffer[8];
  int thisHour = hour(now() - 4 * SECS_PER_HOUR);
  if (thisHour > 12) thisHour -= 12;
  sprintf(buffer, "%d:%02d:%02d", thisHour, minute(), second());
  display.drawString(0, 0, buffer);

  display.drawString(0, 19, String(power) + " W");

  display.drawString(0, 38, String(temp) + " F");

  switch(icon){
    case 0:
      break;
    case 1:
      display.drawXbm(63, 0, 64, 64, cool);
      break;
    case 2:
      display.drawXbm(63, 0, 64, 64, heat);
      break;
    case 3:
      display.drawXbm(63, 0, 64, 64, waiting);
      break;
  }


  //drawXbm(int x, int y, int width, int height, const char *xbm);

  display.display();

}
}

void wifiConnect() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(200);
    digitalWrite(2, !digitalRead(2));
  }
  digitalWrite(2, 1);
}

void mqttConnect() {
  mqtt.setServer(server, 1883);
  mqtt.setCallback(callback);
  if (mqtt.connect(WiFi.hostname().c_str())) {
    mqtt.subscribe("power/W");
    mqtt.subscribe("temp/tempF");
    mqtt.subscribe("hvac/state");
  }
}

/*-------- NTP code ----------*/

const int NTP_PACKET_SIZE = 48; // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming & outgoing packets

time_t getNtpTime() {
  IPAddress ntpServerIP; // NTP server's ip address

  while (Udp.parsePacket() > 0) ; // discard any previously received packets
  WiFi.hostByName(server, ntpServerIP);
  sendNTPpacket(ntpServerIP);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
  return 0; // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress &address)
{
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123); //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}


void setup() {
  Serial.begin(9600);
  pinMode(2, OUTPUT);
  digitalWrite(2, 0);

  pinMode(12, INPUT_PULLUP);
  pinMode(13, INPUT_PULLUP);

  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
    digitalWrite(2, !digitalRead(2));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });

  wifiConnect();
  mqttConnect();
  ArduinoOTA.setHostname("test");
  ArduinoOTA.begin();

  Udp.begin(localPort);
  setSyncProvider(getNtpTime);
  display.init();
  //display.flipScreenVertically();
  //display.setTextAlignment(TEXT_ALIGN_RIGHT);
  display.setFont(ArialMT_Plain_16);
}





void loop() {

  if (WiFi.status() != WL_CONNECTED) {
    wifiConnect();
  }

  if (!mqtt.connected()) {
    mqttConnect();
  }

  mqtt.loop();
  ArduinoOTA.handle();

static bool btnUp = false, btnDwn = false;
static unsigned long lastBtnUp = 0, lastBtnDwn = 0;


if (digitalRead(12) == 0 && digitalRead(13) == 0 && millis() > lastBtnDwn && millis() > lastBtnUp) {
  lastBtnDwn = millis() + 500;
  btnDwn = true;
  lastBtnUp = millis() + 500;
  btnUp = true;
  }

if (digitalRead(12) == 0 && digitalRead(13) == 1 && millis() > lastBtnUp) {
  lastBtnUp = millis() + 500;
  btnUp = true;
  }
if (digitalRead(13) == 0 && digitalRead(12) == 1  && millis() > lastBtnDwn) {
  lastBtnDwn = millis() + 500;
  btnDwn = true;
  }



switch (state) {
  case READY:
    if (btnUp && !btnDwn) {
      display.clear();
      display.display();
      state = NEXTBTN;
      }
        btnUp = false;
        btnDwn = false;
 
    break;
  case NEXTBTN:
    if (btnUp && btnDwn){
        state = READY;
      } 
        btnUp = false;
        btnDwn = false;

   break;

  }

}
